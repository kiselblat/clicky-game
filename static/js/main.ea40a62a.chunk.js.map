{"version":3,"sources":["components/Card/index.js","components/Wrapper/index.js","components/Scoreboard/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","onClick","clickHandler","id","alt","name","src","image","Wrapper","children","Scoreboard","score","highscore","App","state","cards","faces","gameOver","setState","console","log","forEach","element","count","alert","find","clicked","index","sort","Math","random","this","map","card","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kvFAWeA,G,MARF,SAAAC,GAAK,OAChB,yBAAKC,UAAU,OAAOC,QAAU,kBAAMF,EAAMG,aAAaH,EAAMI,MAC7D,yBAAKH,UAAU,iBACb,yBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,YCCxBC,G,MAJC,SAAAT,GAAK,OAAI,yBAAKC,UAAU,WACrCD,EAAMU,YCUMC,G,MAXI,SAAAX,GAAK,OACtB,yBAAKC,UAAU,cACb,yBAAKA,UAAU,YACZD,EAAMU,UAET,yBAAKT,UAAU,UAAf,UACUD,EAAMY,MADhB,gBACoCZ,EAAMa,c,OC+D/BC,E,2MAhEbC,MAAQ,CACNC,MAAOC,EACPL,MAAO,EACPC,UAAW,G,EAIbK,SAAW,WAeT,OAbI,EAAKH,MAAMH,MAAQ,EAAKG,MAAMF,WAChC,EAAKM,SAAS,CAACN,UAAW,EAAKE,MAAMH,OAAQ,WAC3CQ,QAAQC,IAAI,EAAKN,MAAMF,aAI3B,EAAKE,MAAMC,MAAMM,QAAQ,SAAAC,GACvBA,EAAQC,MAAQ,IAIlBC,MAAM,0BAAD,OAA2B,EAAKV,MAAMH,MAAtC,aACL,EAAKO,SAAU,CAACP,MAAO,KAChB,G,EAITT,aAAe,SAAAC,GACb,EAAKW,MAAMC,MAAMU,KAAK,SAACC,EAASC,GAC9B,OAAID,EAAQvB,KAAOA,EACU,IAAvBa,EAAMW,GAAOJ,OACfP,EAAMW,GAAOJ,QACb,EAAKL,SAAU,CAACP,MAAO,EAAKG,MAAMH,MAAQ,GAAI,WAC5CQ,QAAQC,IAAI,EAAKN,MAAMH,SAEzB,EAAKG,MAAMC,MAAMa,KAAK,kBAAMC,KAAKC,SAAW,MACrC,IAEP,EAAKb,YACE,IAGTE,QAAQC,IAAI,UACL,S,wEAMH,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAYT,MAAOoB,KAAKjB,MAAMH,MAAOC,UAAWmB,KAAKjB,MAAMF,WAA3D,eACCmB,KAAKjB,MAAMC,MAAMiB,IAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CACE/B,aAAc,EAAKA,aACnBC,GAAI8B,EAAK9B,GACTI,MAAO0B,EAAK1B,e,GA1DN2B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ea40a62a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Card = props => (\r\n  <div className=\"card\" onClick={ () => props.clickHandler(props.id) }>\r\n    <div className=\"picture-frame\">\r\n      <img alt={props.name} src={props.image} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">\r\n  {props.children}\r\n</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Scoreboard = props => (\r\n  <div className=\"scoreboard\">\r\n    <div className=\"headline\">\r\n      {props.children}\r\n    </div>\r\n    <div className=\"scores\">\r\n      Score: {props.score} High Score: {props.highscore}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Scoreboard;","import React, { Component } from 'react';\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Scoreboard from \"./components/Scoreboard\";\nimport faces from \"./friends.json\";\n\nclass App extends Component {\n  // Setting this.state.cards to the faces array\n  state = {\n    cards: faces,\n    score: 0,\n    highscore: 0\n  };\n\n  // handles game over business\n  gameOver = () => {\n    // record new high score if applicable\n    if (this.state.score > this.state.highscore) {\n      this.setState({highscore: this.state.score}, () => {\n        console.log(this.state.highscore);\n      });\n    }\n    // reset each click count to zero\n    this.state.cards.forEach(element => {\n      element.count = 0;\n    });\n    // tell the user\n    // TODO: find less obnoxious way to inform user\n    alert(`Game Over! You made it ${this.state.score} clicks!`);\n    this.setState( {score: 0} );\n    return true;\n  }\n\n  // handles clicks poorly\n  clickHandler = id => {\n    this.state.cards.find((clicked, index) => {\n      if (clicked.id === id) {\n        if (faces[index].count === 0) {\n          faces[index].count++;\n          this.setState( {score: this.state.score + 1}, () => {\n            console.log(this.state.score);\n          });\n          this.state.cards.sort(() => Math.random() - 0.5);\n          return true;\n        } else {\n          this.gameOver();\n          return false;\n        }\n      } else {\n        console.log(\"Error!\")\n        return null;\n      }\n    });\n  }\n\n  // render is a built in react deal\n  render() {\n    return (\n      <Wrapper>\n        <Scoreboard score={this.state.score} highscore={this.state.highscore}>Clicky Game</Scoreboard>\n        {this.state.cards.map(card => (\n          <Card\n            clickHandler={this.clickHandler}\n            id={card.id}\n            image={card.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}